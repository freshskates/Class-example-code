[
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "buttons.button",
        "description": "buttons.button",
        "isExtraImport": true,
        "detail": "buttons.button",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "buttons.button",
        "description": "buttons.button",
        "isExtraImport": true,
        "detail": "buttons.button",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "buttons.button",
        "description": "buttons.button",
        "isExtraImport": true,
        "detail": "buttons.button",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "buttons.button",
        "description": "buttons.button",
        "isExtraImport": true,
        "detail": "buttons.button",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "buttons.button",
        "description": "buttons.button",
        "isExtraImport": true,
        "detail": "buttons.button",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "buttons.button",
        "description": "buttons.button",
        "isExtraImport": true,
        "detail": "buttons.button",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "buttons.button",
        "description": "buttons.button",
        "isExtraImport": true,
        "detail": "buttons.button",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "buttons.button",
        "description": "buttons.button",
        "isExtraImport": true,
        "detail": "buttons.button",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "buttons.button",
        "description": "buttons.button",
        "isExtraImport": true,
        "detail": "buttons.button",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "buttons.button",
        "description": "buttons.button",
        "isExtraImport": true,
        "detail": "buttons.button",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "buttons.button",
        "description": "buttons.button",
        "isExtraImport": true,
        "detail": "buttons.button",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "buttons.button",
        "description": "buttons.button",
        "isExtraImport": true,
        "detail": "buttons.button",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "buttons.button",
        "description": "buttons.button",
        "isExtraImport": true,
        "detail": "buttons.button",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "buttons.button",
        "description": "buttons.button",
        "isExtraImport": true,
        "detail": "buttons.button",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "buttons.button",
        "description": "buttons.button",
        "isExtraImport": true,
        "detail": "buttons.button",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "buttons.button",
        "description": "buttons.button",
        "isExtraImport": true,
        "detail": "buttons.button",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "buttons.button",
        "description": "buttons.button",
        "isExtraImport": true,
        "detail": "buttons.button",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "buttons.button",
        "description": "buttons.button",
        "isExtraImport": true,
        "detail": "buttons.button",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "buttons.button",
        "description": "buttons.button",
        "isExtraImport": true,
        "detail": "buttons.button",
        "documentation": {}
    },
    {
        "label": "ImageButton",
        "importPath": "buttons.image_button",
        "description": "buttons.image_button",
        "isExtraImport": true,
        "detail": "buttons.image_button",
        "documentation": {}
    },
    {
        "label": "ImageButton",
        "importPath": "buttons.image_button",
        "description": "buttons.image_button",
        "isExtraImport": true,
        "detail": "buttons.image_button",
        "documentation": {}
    },
    {
        "label": "ImageButton",
        "importPath": "buttons.image_button",
        "description": "buttons.image_button",
        "isExtraImport": true,
        "detail": "buttons.image_button",
        "documentation": {}
    },
    {
        "label": "ImageButton",
        "importPath": "buttons.image_button",
        "description": "buttons.image_button",
        "isExtraImport": true,
        "detail": "buttons.image_button",
        "documentation": {}
    },
    {
        "label": "ImageButton",
        "importPath": "buttons.image_button",
        "description": "buttons.image_button",
        "isExtraImport": true,
        "detail": "buttons.image_button",
        "documentation": {}
    },
    {
        "label": "ImageButton",
        "importPath": "buttons.image_button",
        "description": "buttons.image_button",
        "isExtraImport": true,
        "detail": "buttons.image_button",
        "documentation": {}
    },
    {
        "label": "ImageButton",
        "importPath": "buttons.image_button",
        "description": "buttons.image_button",
        "isExtraImport": true,
        "detail": "buttons.image_button",
        "documentation": {}
    },
    {
        "label": "ImageButton",
        "importPath": "buttons.image_button",
        "description": "buttons.image_button",
        "isExtraImport": true,
        "detail": "buttons.image_button",
        "documentation": {}
    },
    {
        "label": "ImageButton",
        "importPath": "buttons.image_button",
        "description": "buttons.image_button",
        "isExtraImport": true,
        "detail": "buttons.image_button",
        "documentation": {}
    },
    {
        "label": "ImageButton",
        "importPath": "buttons.image_button",
        "description": "buttons.image_button",
        "isExtraImport": true,
        "detail": "buttons.image_button",
        "documentation": {}
    },
    {
        "label": "ImageButton",
        "importPath": "buttons.image_button",
        "description": "buttons.image_button",
        "isExtraImport": true,
        "detail": "buttons.image_button",
        "documentation": {}
    },
    {
        "label": "InputBox",
        "importPath": "buttons.input_box",
        "description": "buttons.input_box",
        "isExtraImport": true,
        "detail": "buttons.input_box",
        "documentation": {}
    },
    {
        "label": "InputBox",
        "importPath": "buttons.input_box",
        "description": "buttons.input_box",
        "isExtraImport": true,
        "detail": "buttons.input_box",
        "documentation": {}
    },
    {
        "label": "InputBox",
        "importPath": "buttons.input_box",
        "description": "buttons.input_box",
        "isExtraImport": true,
        "detail": "buttons.input_box",
        "documentation": {}
    },
    {
        "label": "InputBox",
        "importPath": "buttons.input_box",
        "description": "buttons.input_box",
        "isExtraImport": true,
        "detail": "buttons.input_box",
        "documentation": {}
    },
    {
        "label": "InputBox",
        "importPath": "buttons.input_box",
        "description": "buttons.input_box",
        "isExtraImport": true,
        "detail": "buttons.input_box",
        "documentation": {}
    },
    {
        "label": "InputBox",
        "importPath": "buttons.input_box",
        "description": "buttons.input_box",
        "isExtraImport": true,
        "detail": "buttons.input_box",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "network.users.users",
        "description": "network.users.users",
        "isExtraImport": true,
        "detail": "network.users.users",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "network.users.users",
        "description": "network.users.users",
        "isExtraImport": true,
        "detail": "network.users.users",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "network.users.users",
        "description": "network.users.users",
        "isExtraImport": true,
        "detail": "network.users.users",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "network.users.users",
        "description": "network.users.users",
        "isExtraImport": true,
        "detail": "network.users.users",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "importPath": "network.users.users",
        "description": "network.users.users",
        "isExtraImport": true,
        "detail": "network.users.users",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "pygame,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.",
        "description": "pygame.",
        "detail": "pygame.",
        "documentation": {}
    },
    {
        "label": "CardComponent",
        "importPath": "components.card",
        "description": "components.card",
        "isExtraImport": true,
        "detail": "components.card",
        "documentation": {}
    },
    {
        "label": "CardComponent",
        "importPath": "components.card",
        "description": "components.card",
        "isExtraImport": true,
        "detail": "components.card",
        "documentation": {}
    },
    {
        "label": "CardComponent",
        "importPath": "components.card",
        "description": "components.card",
        "isExtraImport": true,
        "detail": "components.card",
        "documentation": {}
    },
    {
        "label": "Blank",
        "importPath": "screens.blank_screen",
        "description": "screens.blank_screen",
        "isExtraImport": true,
        "detail": "screens.blank_screen",
        "documentation": {}
    },
    {
        "label": "Blank",
        "importPath": "screens.blank_screen",
        "description": "screens.blank_screen",
        "isExtraImport": true,
        "detail": "screens.blank_screen",
        "documentation": {}
    },
    {
        "label": "Blank",
        "importPath": "screens.blank_screen",
        "description": "screens.blank_screen",
        "isExtraImport": true,
        "detail": "screens.blank_screen",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "importPath": "components.login_form",
        "description": "components.login_form",
        "isExtraImport": true,
        "detail": "components.login_form",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "importPath": "components.login_form",
        "description": "components.login_form",
        "isExtraImport": true,
        "detail": "components.login_form",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "importPath": "components.login_form",
        "description": "components.login_form",
        "isExtraImport": true,
        "detail": "components.login_form",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "importPath": "components.login_form",
        "description": "components.login_form",
        "isExtraImport": true,
        "detail": "components.login_form",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "buttons.text",
        "description": "buttons.text",
        "isExtraImport": true,
        "detail": "buttons.text",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "buttons.text",
        "description": "buttons.text",
        "isExtraImport": true,
        "detail": "buttons.text",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "buttons.text",
        "description": "buttons.text",
        "isExtraImport": true,
        "detail": "buttons.text",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "buttons.text",
        "description": "buttons.text",
        "isExtraImport": true,
        "detail": "buttons.text",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "buttons.text",
        "description": "buttons.text",
        "isExtraImport": true,
        "detail": "buttons.text",
        "documentation": {}
    },
    {
        "label": "MainScreen",
        "importPath": "screens.main_screen",
        "description": "screens.main_screen",
        "isExtraImport": true,
        "detail": "screens.main_screen",
        "documentation": {}
    },
    {
        "label": "MainScreen",
        "importPath": "screens.main_screen",
        "description": "screens.main_screen",
        "isExtraImport": true,
        "detail": "screens.main_screen",
        "documentation": {}
    },
    {
        "label": "MainScreen",
        "importPath": "screens.main_screen",
        "description": "screens.main_screen",
        "isExtraImport": true,
        "detail": "screens.main_screen",
        "documentation": {}
    },
    {
        "label": "MainScreen",
        "importPath": "screens.main_screen",
        "description": "screens.main_screen",
        "isExtraImport": true,
        "detail": "screens.main_screen",
        "documentation": {}
    },
    {
        "label": "HandComponent",
        "importPath": "components.hand",
        "description": "components.hand",
        "isExtraImport": true,
        "detail": "components.hand",
        "documentation": {}
    },
    {
        "label": "TicTacToeBox",
        "importPath": "buttons.square",
        "description": "buttons.square",
        "isExtraImport": true,
        "detail": "buttons.square",
        "documentation": {}
    },
    {
        "label": "TicTacToeBox",
        "importPath": "buttons.square",
        "description": "buttons.square",
        "isExtraImport": true,
        "detail": "buttons.square",
        "documentation": {}
    },
    {
        "label": "socketio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socketio",
        "description": "socketio",
        "detail": "socketio",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "TicTacToe",
        "importPath": "game.tictactoe",
        "description": "game.tictactoe",
        "isExtraImport": true,
        "detail": "game.tictactoe",
        "documentation": {}
    },
    {
        "label": "TicTacToe",
        "importPath": "game.tictactoe",
        "description": "game.tictactoe",
        "isExtraImport": true,
        "detail": "game.tictactoe",
        "documentation": {}
    },
    {
        "label": "Game",
        "importPath": "screens.game_screen",
        "description": "screens.game_screen",
        "isExtraImport": true,
        "detail": "screens.game_screen",
        "documentation": {}
    },
    {
        "label": "RegisterForm",
        "importPath": "components.register_form",
        "description": "components.register_form",
        "isExtraImport": true,
        "detail": "components.register_form",
        "documentation": {}
    },
    {
        "label": "Storage",
        "importPath": "storage.storage",
        "description": "storage.storage",
        "isExtraImport": true,
        "detail": "storage.storage",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "storage_db",
        "importPath": "db.database",
        "description": "db.database",
        "isExtraImport": true,
        "detail": "db.database",
        "documentation": {}
    },
    {
        "label": "storage_db",
        "importPath": "db.database",
        "description": "db.database",
        "isExtraImport": true,
        "detail": "db.database",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "storage.user",
        "description": "storage.user",
        "isExtraImport": true,
        "detail": "storage.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "storage.user",
        "description": "storage.user",
        "isExtraImport": true,
        "detail": "storage.user",
        "documentation": {}
    },
    {
        "label": "JsonData",
        "importPath": "utility.json_data",
        "description": "utility.json_data",
        "isExtraImport": true,
        "detail": "utility.json_data",
        "documentation": {}
    },
    {
        "label": "Room",
        "importPath": "storage.room",
        "description": "storage.room",
        "isExtraImport": true,
        "detail": "storage.room",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "routes.auth",
        "description": "routes.auth",
        "isExtraImport": true,
        "detail": "routes.auth",
        "documentation": {}
    },
    {
        "label": "SocketIO",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "send",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "emit",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "join_room",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "leave_room",
        "importPath": "flask_socketio",
        "description": "flask_socketio",
        "isExtraImport": true,
        "detail": "flask_socketio",
        "documentation": {}
    },
    {
        "label": "Tools",
        "importPath": "utility.tools",
        "description": "utility.tools",
        "isExtraImport": true,
        "detail": "utility.tools",
        "documentation": {}
    },
    {
        "label": "Button",
        "kind": 6,
        "importPath": "blank.src.buttons.button",
        "description": "blank.src.buttons.button",
        "peekOfCode": "class Button:\n    DARK_GREY = (29,29,29)\n    def __init__(self, screen, x, y, width, height, text=\"\", color=(DARK_GREY), hover=()):\n        self.screen = screen \n        self.clicked = False\n        self.height = height\n        self.width = width\n        self.text = text \n        self.color = color\n        self.hover = (color[0] + 10, color[1] + 10, color[2] + 10)",
        "detail": "blank.src.buttons.button",
        "documentation": {}
    },
    {
        "label": "ImageButton",
        "kind": 6,
        "importPath": "blank.src.buttons.image_button",
        "description": "blank.src.buttons.image_button",
        "peekOfCode": "class ImageButton(Button):\n    def __init__(self, screen, x, y, image_path, scale):\n        image = pygame.image.load(image_path).convert_alpha()\n        width = image.get_width()\n        height = image.get_height()\n        super().__init__(screen, x, y, width, height) \n        self.image = pygame.transform.scale(image, (int(width * scale), int(height * scale)))\n        self.rect = self.image.get_rect()\n        self.rect.topleft = (x, y)\n    def draw(self):",
        "detail": "blank.src.buttons.image_button",
        "documentation": {}
    },
    {
        "label": "InputBox",
        "kind": 6,
        "importPath": "blank.src.buttons.input_box",
        "description": "blank.src.buttons.input_box",
        "peekOfCode": "class InputBox:\n    def __init__(self, screen, x, y, w, h, text=''):\n        self.screen = screen\n        self.rect = pygame.Rect(x, y, w, h)\n        self.color = INACTIVE_BG\n        self.text = text\n        self.txt_surface = FONT.render(text, True, self.color)\n        self.active = False\n    def handle_event(self, event):\n        if event.type == pygame.MOUSEBUTTONDOWN:",
        "detail": "blank.src.buttons.input_box",
        "documentation": {}
    },
    {
        "label": "ACTIVE_BG",
        "kind": 5,
        "importPath": "blank.src.buttons.input_box",
        "description": "blank.src.buttons.input_box",
        "peekOfCode": "ACTIVE_BG = (255, 255, 255)\nINACTIVE_BG = (20, 20, 20)\nFONT = pygame.font.SysFont(\"leelawadee\", 20)\nclass InputBox:\n    def __init__(self, screen, x, y, w, h, text=''):\n        self.screen = screen\n        self.rect = pygame.Rect(x, y, w, h)\n        self.color = INACTIVE_BG\n        self.text = text\n        self.txt_surface = FONT.render(text, True, self.color)",
        "detail": "blank.src.buttons.input_box",
        "documentation": {}
    },
    {
        "label": "INACTIVE_BG",
        "kind": 5,
        "importPath": "blank.src.buttons.input_box",
        "description": "blank.src.buttons.input_box",
        "peekOfCode": "INACTIVE_BG = (20, 20, 20)\nFONT = pygame.font.SysFont(\"leelawadee\", 20)\nclass InputBox:\n    def __init__(self, screen, x, y, w, h, text=''):\n        self.screen = screen\n        self.rect = pygame.Rect(x, y, w, h)\n        self.color = INACTIVE_BG\n        self.text = text\n        self.txt_surface = FONT.render(text, True, self.color)\n        self.active = False",
        "detail": "blank.src.buttons.input_box",
        "documentation": {}
    },
    {
        "label": "FONT",
        "kind": 5,
        "importPath": "blank.src.buttons.input_box",
        "description": "blank.src.buttons.input_box",
        "peekOfCode": "FONT = pygame.font.SysFont(\"leelawadee\", 20)\nclass InputBox:\n    def __init__(self, screen, x, y, w, h, text=''):\n        self.screen = screen\n        self.rect = pygame.Rect(x, y, w, h)\n        self.color = INACTIVE_BG\n        self.text = text\n        self.txt_surface = FONT.render(text, True, self.color)\n        self.active = False\n    def handle_event(self, event):",
        "detail": "blank.src.buttons.input_box",
        "documentation": {}
    },
    {
        "label": "Text",
        "kind": 6,
        "importPath": "blank.src.buttons.text",
        "description": "blank.src.buttons.text",
        "peekOfCode": "class Text:\n    def __init__(self, screen, x, y, text=\"\", font_size=20):\n        self.font = pygame.font.SysFont('leelawadee', font_size)\n        self.screen = screen\n        self.text = text\n        self.pos = (x, y)\n    def setText(self, text):\n        self.text = text\n    def draw(self):\n        textsurface = self.font.render(self.text, True, (255, 255, 255))",
        "detail": "blank.src.buttons.text",
        "documentation": {}
    },
    {
        "label": "CardComponent",
        "kind": 6,
        "importPath": "blank.src.components.card",
        "description": "blank.src.components.card",
        "peekOfCode": "class CardComponent:\n    def __init__(self, screen, x, y, suit, value):\n        self.flipped = False\n        self.value = value\n        self.suit = suit\n        card_image = f\"assets/{value}_{suit}.png\"\n        self.card = ImageButton(screen, x, y, card_image, 0.5)            \n        self.back_card = ImageButton(screen, x, y, \"assets/back_red.png\", 0.5)\n        self.hold = False\n    def draw(self):",
        "detail": "blank.src.components.card",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "kind": 6,
        "importPath": "blank.src.components.login_form",
        "description": "blank.src.components.login_form",
        "peekOfCode": "class LoginForm:\n    def __init__(self, screen, x, y, w, h):\n        self.screen = screen\n        self.user_box = InputBox(screen, x, y, w, h)\n        self.pass_box = InputBox(screen, x, y + h + padding, w, h)\n        self.button = Button(screen, x, y + h * 2 + padding + 10, w, h, \"Login\")\n        self.status = {}\n    def handle_event(self, event):\n        self.user_box.handle_event(event)\n        self.pass_box.handle_event(event)",
        "detail": "blank.src.components.login_form",
        "documentation": {}
    },
    {
        "label": "padding",
        "kind": 5,
        "importPath": "blank.src.components.login_form",
        "description": "blank.src.components.login_form",
        "peekOfCode": "padding = 10\n# Login Form component holds three elements, \n# 2 Input Boxes\n# 1 Button\nclass LoginForm:\n    def __init__(self, screen, x, y, w, h):\n        self.screen = screen\n        self.user_box = InputBox(screen, x, y, w, h)\n        self.pass_box = InputBox(screen, x, y + h + padding, w, h)\n        self.button = Button(screen, x, y + h * 2 + padding + 10, w, h, \"Login\")",
        "detail": "blank.src.components.login_form",
        "documentation": {}
    },
    {
        "label": "RoomModel",
        "kind": 6,
        "importPath": "blank.src.network.rooms.rooms",
        "description": "blank.src.network.rooms.rooms",
        "peekOfCode": "class RoomModel:\n    @staticmethod\n    def create_room(username):\n        options = {\"user\": username}\n        response = requests.post(f\"{url}/auth/create_room\", data=options)\n        return response.json()\n    @staticmethod\n    def join_room(id, username):\n        options = {\"id\": id, \"user\": username}\n        response = requests.post(f\"{url}/auth/join_room\", data=options)",
        "detail": "blank.src.network.rooms.rooms",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "blank.src.network.rooms.rooms",
        "description": "blank.src.network.rooms.rooms",
        "peekOfCode": "url = \"http://127.0.0.1:5000\"\nclass RoomModel:\n    @staticmethod\n    def create_room(username):\n        options = {\"user\": username}\n        response = requests.post(f\"{url}/auth/create_room\", data=options)\n        return response.json()\n    @staticmethod\n    def join_room(id, username):\n        options = {\"id\": id, \"user\": username}",
        "detail": "blank.src.network.rooms.rooms",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "kind": 6,
        "importPath": "blank.src.network.users.users",
        "description": "blank.src.network.users.users",
        "peekOfCode": "class UserModel:\n    @staticmethod\n    def create_user(username, password):\n        options = {\"user\": username, \"password\": password}\n        response = requests.post(f\"{url}/auth/register\", data=options)\n        return response.json()\n    @staticmethod\n    def authenticate(username, password):\n        options = {\"user\": username, \"password\": password}\n        response = requests.post(f\"{url}/auth/login\", data=options)",
        "detail": "blank.src.network.users.users",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "blank.src.network.users.users",
        "description": "blank.src.network.users.users",
        "peekOfCode": "url = \"http://127.0.0.1:5000\"\nclass UserModel:\n    @staticmethod\n    def create_user(username, password):\n        options = {\"user\": username, \"password\": password}\n        response = requests.post(f\"{url}/auth/register\", data=options)\n        return response.json()\n    @staticmethod\n    def authenticate(username, password):\n        options = {\"user\": username, \"password\": password}",
        "detail": "blank.src.network.users.users",
        "documentation": {}
    },
    {
        "label": "Blank",
        "kind": 6,
        "importPath": "blank.src.screens.blank_screen",
        "description": "blank.src.screens.blank_screen",
        "peekOfCode": "class Blank: \n    def __init__(self):\n        self.width = 600\n        self.height = 600\n        self.setup_screen()\n        self.click = False\n        self.hold = False\n        self.running = True\n        # self, screen, x, y, width, height, text=\"\", color=(DARK_GREY)\n        self.flip_button = Button(self.screen, self.width//2 - 100, self.height//2 - 25, 200, 50, \"flip card\", BLACK_COLOR)",
        "detail": "blank.src.screens.blank_screen",
        "documentation": {}
    },
    {
        "label": "BG_COLOR",
        "kind": 5,
        "importPath": "blank.src.screens.blank_screen",
        "description": "blank.src.screens.blank_screen",
        "peekOfCode": "BG_COLOR = (30, 30, 30)\nBLACK_COLOR = (0, 0, 0)\nclass Blank: \n    def __init__(self):\n        self.width = 600\n        self.height = 600\n        self.setup_screen()\n        self.click = False\n        self.hold = False\n        self.running = True",
        "detail": "blank.src.screens.blank_screen",
        "documentation": {}
    },
    {
        "label": "BLACK_COLOR",
        "kind": 5,
        "importPath": "blank.src.screens.blank_screen",
        "description": "blank.src.screens.blank_screen",
        "peekOfCode": "BLACK_COLOR = (0, 0, 0)\nclass Blank: \n    def __init__(self):\n        self.width = 600\n        self.height = 600\n        self.setup_screen()\n        self.click = False\n        self.hold = False\n        self.running = True\n        # self, screen, x, y, width, height, text=\"\", color=(DARK_GREY)",
        "detail": "blank.src.screens.blank_screen",
        "documentation": {}
    },
    {
        "label": "MainScreen",
        "kind": 6,
        "importPath": "blank.src.screens.main_screen",
        "description": "blank.src.screens.main_screen",
        "peekOfCode": "class MainScreen: \n    def __init__(self):\n        self.width = 800\n        self.height = 500\n        self.setup_screen()\n        # objects init\n        start_button = ImageButton(self.screen, 100, 200, \"assets/start_btn.png\", 0.7)\n        exit_button = ImageButton(self.screen, 450, 200, \"assets/exit_btn.png\", 0.7)\n        exit_button = ImageButton(self.screen, 450, 200, \"assets/exit_btn.png\", 0.7)\n        user_text = Text(self.screen, 15, 15, \"Not Logged in\")",
        "detail": "blank.src.screens.main_screen",
        "documentation": {}
    },
    {
        "label": "BG_COLOR",
        "kind": 5,
        "importPath": "blank.src.screens.main_screen",
        "description": "blank.src.screens.main_screen",
        "peekOfCode": "BG_COLOR = (28, 170, 156)\nclass MainScreen: \n    def __init__(self):\n        self.width = 800\n        self.height = 500\n        self.setup_screen()\n        # objects init\n        start_button = ImageButton(self.screen, 100, 200, \"assets/start_btn.png\", 0.7)\n        exit_button = ImageButton(self.screen, 450, 200, \"assets/exit_btn.png\", 0.7)\n        exit_button = ImageButton(self.screen, 450, 200, \"assets/exit_btn.png\", 0.7)",
        "detail": "blank.src.screens.main_screen",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "blank.src.main",
        "description": "blank.src.main",
        "peekOfCode": "def main():\n    main_screen = MainScreen()\n    main_screen.run()   \nif __name__ == \"__main__\":\n    main()",
        "detail": "blank.src.main",
        "documentation": {}
    },
    {
        "label": "Button",
        "kind": 6,
        "importPath": "blank copy.src.buttons.button",
        "description": "blank copy.src.buttons.button",
        "peekOfCode": "class Button:\n    DARK_GREY = (29,29,29)\n    def __init__(self, screen, x, y, width, height, text=\"\", color=(DARK_GREY), hover=()):\n        self.screen = screen \n        self.clicked = False\n        self.height = height\n        self.width = width\n        self.text = text \n        self.color = color\n        self.hover = (color[0] + 10, color[1] + 10, color[2] + 10)",
        "detail": "blank copy.src.buttons.button",
        "documentation": {}
    },
    {
        "label": "ImageButton",
        "kind": 6,
        "importPath": "blank copy.src.buttons.image_button",
        "description": "blank copy.src.buttons.image_button",
        "peekOfCode": "class ImageButton(Button):\n    def __init__(self, screen, x, y, image_path, scale):\n        image = pygame.image.load(image_path).convert_alpha()\n        width = image.get_width()\n        height = image.get_height()\n        super().__init__(screen, x, y, width, height) \n        self.image = pygame.transform.scale(image, (int(width * scale), int(height * scale)))\n        self.rect = self.image.get_rect()\n        self.rect.topleft = (x, y)\n    def draw(self):",
        "detail": "blank copy.src.buttons.image_button",
        "documentation": {}
    },
    {
        "label": "InputBox",
        "kind": 6,
        "importPath": "blank copy.src.buttons.input_box",
        "description": "blank copy.src.buttons.input_box",
        "peekOfCode": "class InputBox:\n    def __init__(self, screen, x, y, w, h, text=''):\n        self.screen = screen\n        self.rect = pygame.Rect(x, y, w, h)\n        self.color = INACTIVE_BG\n        self.text = text\n        self.txt_surface = FONT.render(text, True, self.color)\n        self.active = False\n    def handle_event(self, event):\n        if event.type == pygame.MOUSEBUTTONDOWN:",
        "detail": "blank copy.src.buttons.input_box",
        "documentation": {}
    },
    {
        "label": "ACTIVE_BG",
        "kind": 5,
        "importPath": "blank copy.src.buttons.input_box",
        "description": "blank copy.src.buttons.input_box",
        "peekOfCode": "ACTIVE_BG = (255, 255, 255)\nINACTIVE_BG = (20, 20, 20)\nFONT = pygame.font.SysFont(\"leelawadee\", 20)\nclass InputBox:\n    def __init__(self, screen, x, y, w, h, text=''):\n        self.screen = screen\n        self.rect = pygame.Rect(x, y, w, h)\n        self.color = INACTIVE_BG\n        self.text = text\n        self.txt_surface = FONT.render(text, True, self.color)",
        "detail": "blank copy.src.buttons.input_box",
        "documentation": {}
    },
    {
        "label": "INACTIVE_BG",
        "kind": 5,
        "importPath": "blank copy.src.buttons.input_box",
        "description": "blank copy.src.buttons.input_box",
        "peekOfCode": "INACTIVE_BG = (20, 20, 20)\nFONT = pygame.font.SysFont(\"leelawadee\", 20)\nclass InputBox:\n    def __init__(self, screen, x, y, w, h, text=''):\n        self.screen = screen\n        self.rect = pygame.Rect(x, y, w, h)\n        self.color = INACTIVE_BG\n        self.text = text\n        self.txt_surface = FONT.render(text, True, self.color)\n        self.active = False",
        "detail": "blank copy.src.buttons.input_box",
        "documentation": {}
    },
    {
        "label": "FONT",
        "kind": 5,
        "importPath": "blank copy.src.buttons.input_box",
        "description": "blank copy.src.buttons.input_box",
        "peekOfCode": "FONT = pygame.font.SysFont(\"leelawadee\", 20)\nclass InputBox:\n    def __init__(self, screen, x, y, w, h, text=''):\n        self.screen = screen\n        self.rect = pygame.Rect(x, y, w, h)\n        self.color = INACTIVE_BG\n        self.text = text\n        self.txt_surface = FONT.render(text, True, self.color)\n        self.active = False\n    def handle_event(self, event):",
        "detail": "blank copy.src.buttons.input_box",
        "documentation": {}
    },
    {
        "label": "Text",
        "kind": 6,
        "importPath": "blank copy.src.buttons.text",
        "description": "blank copy.src.buttons.text",
        "peekOfCode": "class Text:\n    def __init__(self, screen, x, y, text=\"\", font_size=20):\n        self.font = pygame.font.SysFont('leelawadee', font_size)\n        self.screen = screen\n        self.text = text\n        self.pos = (x, y)\n    def setText(self, text):\n        self.text = text\n    def draw(self):\n        textsurface = self.font.render(self.text, True, (255, 255, 255))",
        "detail": "blank copy.src.buttons.text",
        "documentation": {}
    },
    {
        "label": "CardComponent",
        "kind": 6,
        "importPath": "blank copy.src.components.card",
        "description": "blank copy.src.components.card",
        "peekOfCode": "class CardComponent:\n    def __init__(self, screen, x, y, suit, value):\n        self.flipped = False\n        self.value = value\n        self.suit = suit\n        card_image = f\"assets/{value}_{suit}.png\"\n        self.card = ImageButton(screen, x, y, card_image, 0.5)            \n        self.back_card = ImageButton(screen, x, y, \"assets/back_red.png\", 0.5)\n        self.hold = False\n    def draw(self):",
        "detail": "blank copy.src.components.card",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "kind": 6,
        "importPath": "blank copy.src.components.login_form",
        "description": "blank copy.src.components.login_form",
        "peekOfCode": "class LoginForm:\n    def __init__(self, screen, x, y, w, h):\n        self.screen = screen\n        self.user_box = InputBox(screen, x, y, w, h)\n        self.pass_box = InputBox(screen, x, y + h + padding, w, h)\n        self.button = Button(screen, x, y + h * 2 + padding + 10, w, h, \"Login\")\n        self.status = {}\n    def handle_event(self, event):\n        self.user_box.handle_event(event)\n        self.pass_box.handle_event(event)",
        "detail": "blank copy.src.components.login_form",
        "documentation": {}
    },
    {
        "label": "padding",
        "kind": 5,
        "importPath": "blank copy.src.components.login_form",
        "description": "blank copy.src.components.login_form",
        "peekOfCode": "padding = 10\n# Login Form component holds three elements, \n# 2 Input Boxes\n# 1 Button\nclass LoginForm:\n    def __init__(self, screen, x, y, w, h):\n        self.screen = screen\n        self.user_box = InputBox(screen, x, y, w, h)\n        self.pass_box = InputBox(screen, x, y + h + padding, w, h)\n        self.button = Button(screen, x, y + h * 2 + padding + 10, w, h, \"Login\")",
        "detail": "blank copy.src.components.login_form",
        "documentation": {}
    },
    {
        "label": "RoomModel",
        "kind": 6,
        "importPath": "blank copy.src.network.rooms.rooms",
        "description": "blank copy.src.network.rooms.rooms",
        "peekOfCode": "class RoomModel:\n    @staticmethod\n    def create_room(username):\n        options = {\"user\": username}\n        response = requests.post(f\"{url}/auth/create_room\", data=options)\n        return response.json()\n    @staticmethod\n    def join_room(id, username):\n        options = {\"id\": id, \"user\": username}\n        response = requests.post(f\"{url}/auth/join_room\", data=options)",
        "detail": "blank copy.src.network.rooms.rooms",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "blank copy.src.network.rooms.rooms",
        "description": "blank copy.src.network.rooms.rooms",
        "peekOfCode": "url = \"http://127.0.0.1:5000\"\nclass RoomModel:\n    @staticmethod\n    def create_room(username):\n        options = {\"user\": username}\n        response = requests.post(f\"{url}/auth/create_room\", data=options)\n        return response.json()\n    @staticmethod\n    def join_room(id, username):\n        options = {\"id\": id, \"user\": username}",
        "detail": "blank copy.src.network.rooms.rooms",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "kind": 6,
        "importPath": "blank copy.src.network.users.users",
        "description": "blank copy.src.network.users.users",
        "peekOfCode": "class UserModel:\n    @staticmethod\n    def create_user(username, password):\n        options = {\"user\": username, \"password\": password}\n        response = requests.post(f\"{url}/auth/register\", data=options)\n        return response.json()\n    @staticmethod\n    def authenticate(username, password):\n        options = {\"user\": username, \"password\": password}\n        response = requests.post(f\"{url}/auth/login\", data=options)",
        "detail": "blank copy.src.network.users.users",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "blank copy.src.network.users.users",
        "description": "blank copy.src.network.users.users",
        "peekOfCode": "url = \"http://127.0.0.1:5000\"\nclass UserModel:\n    @staticmethod\n    def create_user(username, password):\n        options = {\"user\": username, \"password\": password}\n        response = requests.post(f\"{url}/auth/register\", data=options)\n        return response.json()\n    @staticmethod\n    def authenticate(username, password):\n        options = {\"user\": username, \"password\": password}",
        "detail": "blank copy.src.network.users.users",
        "documentation": {}
    },
    {
        "label": "Blank",
        "kind": 6,
        "importPath": "blank copy.src.screens.blank_screen",
        "description": "blank copy.src.screens.blank_screen",
        "peekOfCode": "class Blank: \n    def __init__(self):\n        self.width = 600\n        self.height = 600\n        self.setup_screen()\n        self.click = False\n        self.hold = False\n        self.running = True\n        # self, screen, x, y, width, height, text=\"\", color=(DARK_GREY)\n        self.flip_button = Button(self.screen, self.width//2 - 100, self.height//2 - 25, 200, 50, \"flip card\", BLACK_COLOR)",
        "detail": "blank copy.src.screens.blank_screen",
        "documentation": {}
    },
    {
        "label": "BG_COLOR",
        "kind": 5,
        "importPath": "blank copy.src.screens.blank_screen",
        "description": "blank copy.src.screens.blank_screen",
        "peekOfCode": "BG_COLOR = (30, 30, 30)\nBLACK_COLOR = (0, 0, 0)\nclass Blank: \n    def __init__(self):\n        self.width = 600\n        self.height = 600\n        self.setup_screen()\n        self.click = False\n        self.hold = False\n        self.running = True",
        "detail": "blank copy.src.screens.blank_screen",
        "documentation": {}
    },
    {
        "label": "BLACK_COLOR",
        "kind": 5,
        "importPath": "blank copy.src.screens.blank_screen",
        "description": "blank copy.src.screens.blank_screen",
        "peekOfCode": "BLACK_COLOR = (0, 0, 0)\nclass Blank: \n    def __init__(self):\n        self.width = 600\n        self.height = 600\n        self.setup_screen()\n        self.click = False\n        self.hold = False\n        self.running = True\n        # self, screen, x, y, width, height, text=\"\", color=(DARK_GREY)",
        "detail": "blank copy.src.screens.blank_screen",
        "documentation": {}
    },
    {
        "label": "MainScreen",
        "kind": 6,
        "importPath": "blank copy.src.screens.main_screen",
        "description": "blank copy.src.screens.main_screen",
        "peekOfCode": "class MainScreen: \n    def __init__(self):\n        self.width = 800\n        self.height = 500\n        self.setup_screen()\n        # objects init\n        start_button = ImageButton(self.screen, 100, 200, \"assets/start_btn.png\", 0.7)\n        exit_button = ImageButton(self.screen, 450, 200, \"assets/exit_btn.png\", 0.7)\n        exit_button = ImageButton(self.screen, 450, 200, \"assets/exit_btn.png\", 0.7)\n        user_text = Text(self.screen, 15, 15, \"Not Logged in\")",
        "detail": "blank copy.src.screens.main_screen",
        "documentation": {}
    },
    {
        "label": "BG_COLOR",
        "kind": 5,
        "importPath": "blank copy.src.screens.main_screen",
        "description": "blank copy.src.screens.main_screen",
        "peekOfCode": "BG_COLOR = (28, 170, 156)\nclass MainScreen: \n    def __init__(self):\n        self.width = 800\n        self.height = 500\n        self.setup_screen()\n        # objects init\n        start_button = ImageButton(self.screen, 100, 200, \"assets/start_btn.png\", 0.7)\n        exit_button = ImageButton(self.screen, 450, 200, \"assets/exit_btn.png\", 0.7)\n        exit_button = ImageButton(self.screen, 450, 200, \"assets/exit_btn.png\", 0.7)",
        "detail": "blank copy.src.screens.main_screen",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "blank copy.src.main",
        "description": "blank copy.src.main",
        "peekOfCode": "def main():\n    main_screen = MainScreen()\n    main_screen.run()   \nif __name__ == \"__main__\":\n    main()",
        "detail": "blank copy.src.main",
        "documentation": {}
    },
    {
        "label": "Button",
        "kind": 6,
        "importPath": "card_example.src.buttons.button",
        "description": "card_example.src.buttons.button",
        "peekOfCode": "class Button:\n    DARK_GREY = (29,29,29)\n    def __init__(self, screen, x, y, width, height, text=\"\", color=(DARK_GREY), hover=()):\n        self.screen = screen \n        self.clicked = False\n        self.height = height\n        self.width = width\n        self.text = text \n        self.color = color\n        self.hover = (color[0] + 10, color[1] + 10, color[2] + 10)",
        "detail": "card_example.src.buttons.button",
        "documentation": {}
    },
    {
        "label": "ImageButton",
        "kind": 6,
        "importPath": "card_example.src.buttons.image_button",
        "description": "card_example.src.buttons.image_button",
        "peekOfCode": "class ImageButton(Button):\n    def __init__(self, screen, x, y, image_path, scale):\n        image = pygame.image.load(image_path).convert_alpha()\n        width = image.get_width()\n        height = image.get_height()\n        super().__init__(screen, x, y, width, height) \n        self.image = pygame.transform.scale(image, (int(width * scale), int(height * scale)))\n        self.rect = self.image.get_rect()\n        self.rect.topleft = (x, y)\n    def draw(self):",
        "detail": "card_example.src.buttons.image_button",
        "documentation": {}
    },
    {
        "label": "InputBox",
        "kind": 6,
        "importPath": "card_example.src.buttons.input_box",
        "description": "card_example.src.buttons.input_box",
        "peekOfCode": "class InputBox:\n    def __init__(self, screen, x, y, w, h, text=''):\n        self.screen = screen\n        self.rect = pygame.Rect(x, y, w, h)\n        self.color = INACTIVE_BG\n        self.text = text\n        self.txt_surface = FONT.render(text, True, self.color)\n        self.active = False\n    def handle_event(self, event):\n        if event.type == pygame.MOUSEBUTTONDOWN:",
        "detail": "card_example.src.buttons.input_box",
        "documentation": {}
    },
    {
        "label": "ACTIVE_BG",
        "kind": 5,
        "importPath": "card_example.src.buttons.input_box",
        "description": "card_example.src.buttons.input_box",
        "peekOfCode": "ACTIVE_BG = (255, 255, 255)\nINACTIVE_BG = (20, 20, 20)\nFONT = pygame.font.SysFont(\"leelawadee\", 20)\nclass InputBox:\n    def __init__(self, screen, x, y, w, h, text=''):\n        self.screen = screen\n        self.rect = pygame.Rect(x, y, w, h)\n        self.color = INACTIVE_BG\n        self.text = text\n        self.txt_surface = FONT.render(text, True, self.color)",
        "detail": "card_example.src.buttons.input_box",
        "documentation": {}
    },
    {
        "label": "INACTIVE_BG",
        "kind": 5,
        "importPath": "card_example.src.buttons.input_box",
        "description": "card_example.src.buttons.input_box",
        "peekOfCode": "INACTIVE_BG = (20, 20, 20)\nFONT = pygame.font.SysFont(\"leelawadee\", 20)\nclass InputBox:\n    def __init__(self, screen, x, y, w, h, text=''):\n        self.screen = screen\n        self.rect = pygame.Rect(x, y, w, h)\n        self.color = INACTIVE_BG\n        self.text = text\n        self.txt_surface = FONT.render(text, True, self.color)\n        self.active = False",
        "detail": "card_example.src.buttons.input_box",
        "documentation": {}
    },
    {
        "label": "FONT",
        "kind": 5,
        "importPath": "card_example.src.buttons.input_box",
        "description": "card_example.src.buttons.input_box",
        "peekOfCode": "FONT = pygame.font.SysFont(\"leelawadee\", 20)\nclass InputBox:\n    def __init__(self, screen, x, y, w, h, text=''):\n        self.screen = screen\n        self.rect = pygame.Rect(x, y, w, h)\n        self.color = INACTIVE_BG\n        self.text = text\n        self.txt_surface = FONT.render(text, True, self.color)\n        self.active = False\n    def handle_event(self, event):",
        "detail": "card_example.src.buttons.input_box",
        "documentation": {}
    },
    {
        "label": "Text",
        "kind": 6,
        "importPath": "card_example.src.buttons.text",
        "description": "card_example.src.buttons.text",
        "peekOfCode": "class Text:\n    def __init__(self, screen, x, y, text=\"\", font_size=20):\n        self.font = pygame.font.SysFont('leelawadee', font_size)\n        self.screen = screen\n        self.text = text\n        self.pos = (x, y)\n    def setText(self, text):\n        self.text = text\n    def draw(self):\n        textsurface = self.font.render(self.text, True, (255, 255, 255))",
        "detail": "card_example.src.buttons.text",
        "documentation": {}
    },
    {
        "label": "CardComponent",
        "kind": 6,
        "importPath": "card_example.src.components.card",
        "description": "card_example.src.components.card",
        "peekOfCode": "class CardComponent:\n    def __init__(self, screen, x, y, suit, value):\n            self.flipped = False\n            self.value = value\n            self.suit = suit\n            card_image = f\"assets/{value}_{suit}.png\"\n            self.card = ImageButton(screen, x, y, card_image, 0.5)   \n            self.back = ImageButton(screen, x, y, \"assets/back_red.png\", 0.5)\n    def draw(self):\n        if self.flipped == True:",
        "detail": "card_example.src.components.card",
        "documentation": {}
    },
    {
        "label": "HandComponent",
        "kind": 6,
        "importPath": "card_example.src.components.hand",
        "description": "card_example.src.components.hand",
        "peekOfCode": "class HandComponent:\n    def __init__(self, screen, x, y):\n        self.screen = screen\n        self.x = x\n        self.y = y\n        self.cards = []\n    def addCard(self, suit, value):\n        current_x = (len(self.cards) * 50) + self.x \n        new_card = CardComponent(self.screen, current_x, self.y, suit, value)\n        self.cards.append(new_card)",
        "detail": "card_example.src.components.hand",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "kind": 6,
        "importPath": "card_example.src.components.login_form",
        "description": "card_example.src.components.login_form",
        "peekOfCode": "class LoginForm:\n    def __init__(self, screen, x, y, w, h):\n        self.screen = screen\n        self.user_box = InputBox(screen, x, y, w, h)\n        self.pass_box = InputBox(screen, x, y + h + padding, w, h)\n        self.button = Button(screen, x, y + h * 2 + padding + 10, w, h, \"Login\")\n        self.status = {}\n    def handle_event(self, event):\n        self.user_box.handle_event(event)\n        self.pass_box.handle_event(event)",
        "detail": "card_example.src.components.login_form",
        "documentation": {}
    },
    {
        "label": "padding",
        "kind": 5,
        "importPath": "card_example.src.components.login_form",
        "description": "card_example.src.components.login_form",
        "peekOfCode": "padding = 10\n# Login Form component holds three elements, \n# 2 Input Boxes\n# 1 Button\nclass LoginForm:\n    def __init__(self, screen, x, y, w, h):\n        self.screen = screen\n        self.user_box = InputBox(screen, x, y, w, h)\n        self.pass_box = InputBox(screen, x, y + h + padding, w, h)\n        self.button = Button(screen, x, y + h * 2 + padding + 10, w, h, \"Login\")",
        "detail": "card_example.src.components.login_form",
        "documentation": {}
    },
    {
        "label": "RoomModel",
        "kind": 6,
        "importPath": "card_example.src.network.rooms.rooms",
        "description": "card_example.src.network.rooms.rooms",
        "peekOfCode": "class RoomModel:\n    @staticmethod\n    def create_room(username):\n        options = {\"user\": username}\n        response = requests.post(f\"{url}/auth/create_room\", data=options)\n        return response.json()\n    @staticmethod\n    def join_room(id, username):\n        options = {\"id\": id, \"user\": username}\n        response = requests.post(f\"{url}/auth/join_room\", data=options)",
        "detail": "card_example.src.network.rooms.rooms",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "card_example.src.network.rooms.rooms",
        "description": "card_example.src.network.rooms.rooms",
        "peekOfCode": "url = \"http://127.0.0.1:5000\"\nclass RoomModel:\n    @staticmethod\n    def create_room(username):\n        options = {\"user\": username}\n        response = requests.post(f\"{url}/auth/create_room\", data=options)\n        return response.json()\n    @staticmethod\n    def join_room(id, username):\n        options = {\"id\": id, \"user\": username}",
        "detail": "card_example.src.network.rooms.rooms",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "kind": 6,
        "importPath": "card_example.src.network.users.users",
        "description": "card_example.src.network.users.users",
        "peekOfCode": "class UserModel:\n    @staticmethod\n    def create_user(username, password):\n        options = {\"user\": username, \"password\": password}\n        response = requests.post(f\"{url}/auth/register\", data=options)\n        return response.json()\n    @staticmethod\n    def authenticate(username, password):\n        options = {\"user\": username, \"password\": password}\n        response = requests.post(f\"{url}/auth/login\", data=options)",
        "detail": "card_example.src.network.users.users",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "card_example.src.network.users.users",
        "description": "card_example.src.network.users.users",
        "peekOfCode": "url = \"http://127.0.0.1:5000\"\nclass UserModel:\n    @staticmethod\n    def create_user(username, password):\n        options = {\"user\": username, \"password\": password}\n        response = requests.post(f\"{url}/auth/register\", data=options)\n        return response.json()\n    @staticmethod\n    def authenticate(username, password):\n        options = {\"user\": username, \"password\": password}",
        "detail": "card_example.src.network.users.users",
        "documentation": {}
    },
    {
        "label": "Blank",
        "kind": 6,
        "importPath": "card_example.src.screens.blank_screen",
        "description": "card_example.src.screens.blank_screen",
        "peekOfCode": "class Blank: \n    def __init__(self):\n        self.width = 600\n        self.height = 600\n        self.setup_screen()\n        self.click = False\n        self.running = True\n        # self, screen, x, y, width, height, text=\"\", color=(DARK_GREY)\n        self.flip_button = Button(self.screen, self.width//2 - 100, self.height//2 - 25, 200, 50, \"flip card\", BLACK_COLOR)\n        self.add_card = Button(self.screen, self.width//2 - 300, self.height//2 - 25, 200, 50, \"add card\", BLACK_COLOR)",
        "detail": "card_example.src.screens.blank_screen",
        "documentation": {}
    },
    {
        "label": "BG_COLOR",
        "kind": 5,
        "importPath": "card_example.src.screens.blank_screen",
        "description": "card_example.src.screens.blank_screen",
        "peekOfCode": "BG_COLOR = (30, 30, 30)\nBLACK_COLOR = (0, 0, 0)\nclass Blank: \n    def __init__(self):\n        self.width = 600\n        self.height = 600\n        self.setup_screen()\n        self.click = False\n        self.running = True\n        # self, screen, x, y, width, height, text=\"\", color=(DARK_GREY)",
        "detail": "card_example.src.screens.blank_screen",
        "documentation": {}
    },
    {
        "label": "BLACK_COLOR",
        "kind": 5,
        "importPath": "card_example.src.screens.blank_screen",
        "description": "card_example.src.screens.blank_screen",
        "peekOfCode": "BLACK_COLOR = (0, 0, 0)\nclass Blank: \n    def __init__(self):\n        self.width = 600\n        self.height = 600\n        self.setup_screen()\n        self.click = False\n        self.running = True\n        # self, screen, x, y, width, height, text=\"\", color=(DARK_GREY)\n        self.flip_button = Button(self.screen, self.width//2 - 100, self.height//2 - 25, 200, 50, \"flip card\", BLACK_COLOR)",
        "detail": "card_example.src.screens.blank_screen",
        "documentation": {}
    },
    {
        "label": "MainScreen",
        "kind": 6,
        "importPath": "card_example.src.screens.main_screen",
        "description": "card_example.src.screens.main_screen",
        "peekOfCode": "class MainScreen: \n    def __init__(self):\n        self.width = 800\n        self.height = 500\n        self.setup_screen()\n        # objects init\n        start_button = ImageButton(self.screen, 100, 200, \"assets/start_btn.png\", 0.7)\n        exit_button = ImageButton(self.screen, 450, 200, \"assets/exit_btn.png\", 0.7)\n        exit_button = ImageButton(self.screen, 450, 200, \"assets/exit_btn.png\", 0.7)\n        user_text = Text(self.screen, 15, 15, \"Not Logged in\")",
        "detail": "card_example.src.screens.main_screen",
        "documentation": {}
    },
    {
        "label": "BG_COLOR",
        "kind": 5,
        "importPath": "card_example.src.screens.main_screen",
        "description": "card_example.src.screens.main_screen",
        "peekOfCode": "BG_COLOR = (28, 170, 156)\nclass MainScreen: \n    def __init__(self):\n        self.width = 800\n        self.height = 500\n        self.setup_screen()\n        # objects init\n        start_button = ImageButton(self.screen, 100, 200, \"assets/start_btn.png\", 0.7)\n        exit_button = ImageButton(self.screen, 450, 200, \"assets/exit_btn.png\", 0.7)\n        exit_button = ImageButton(self.screen, 450, 200, \"assets/exit_btn.png\", 0.7)",
        "detail": "card_example.src.screens.main_screen",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "card_example.src.main",
        "description": "card_example.src.main",
        "peekOfCode": "def main():\n    main_screen = MainScreen()\n    main_screen.run()   \nif __name__ == \"__main__\":\n    main()",
        "detail": "card_example.src.main",
        "documentation": {}
    },
    {
        "label": "Button",
        "kind": 6,
        "importPath": "examples.example1.src.buttons.button",
        "description": "examples.example1.src.buttons.button",
        "peekOfCode": "class Button:\n    DARK_GREY = (29,29,29)\n    def __init__(self, screen, x, y, width, height, text=\"\", color=(DARK_GREY), hover=()):\n        self.screen = screen \n        self.clicked = False\n        self.height = height\n        self.width = width\n        self.text = text \n        self.color = color\n        self.hover = (color[0] + 10, color[1] + 10, color[2] + 10)",
        "detail": "examples.example1.src.buttons.button",
        "documentation": {}
    },
    {
        "label": "ImageButton",
        "kind": 6,
        "importPath": "examples.example1.src.buttons.image_button",
        "description": "examples.example1.src.buttons.image_button",
        "peekOfCode": "class ImageButton(Button):\n    def __init__(self, screen, x, y, image, scale):\n        width = image.get_width()\n        height = image.get_height()\n        super().__init__(screen, x, y, width, height) \n        self.image = pygame.transform.scale(image, (int(width * scale), int(height * scale)))\n        self.rect = self.image.get_rect()\n        self.rect.topleft = (x, y)\n    def draw(self):\n        self.screen.blit(self.image, (self.rect.x, self.rect.y))",
        "detail": "examples.example1.src.buttons.image_button",
        "documentation": {}
    },
    {
        "label": "TicTacToeBox",
        "kind": 6,
        "importPath": "examples.example1.src.buttons.square",
        "description": "examples.example1.src.buttons.square",
        "peekOfCode": "class TicTacToeBox(Button):\n    def __init__(self, screen, x, y, height, width, text, color=(29,29,29)):\n        super().__init__(screen, x, y, height, width, text, color)\n    def setValue(self, value):\n        self.text = value;\n    def getValue(self):\n        options = \"OX\"\n        return self.text if self.text in options else \"\"",
        "detail": "examples.example1.src.buttons.square",
        "documentation": {}
    },
    {
        "label": "main_menu",
        "kind": 2,
        "importPath": "examples.example1.src.main",
        "description": "examples.example1.src.main",
        "peekOfCode": "def main_menu():\n    click = False\n    run = True\n    WIDTH = 800\n    HEIGHT = 500\n    while run: \n        screen = pygame.display.set_mode((WIDTH, HEIGHT))\n        pygame.display.set_caption(\"Duality Game\")\n        screen.fill(BG_COLOR)\n        pos = pygame.mouse.get_pos()",
        "detail": "examples.example1.src.main",
        "documentation": {}
    },
    {
        "label": "BG_COLOR",
        "kind": 5,
        "importPath": "examples.example1.src.main",
        "description": "examples.example1.src.main",
        "peekOfCode": "BG_COLOR = (28, 170, 156)\nscreen = pygame.display.set_mode((800, 500))\nclock = pygame.time.Clock()\nbutton1 = Button(screen, 0, 0, 200, 100, \"Go\")\ndef main_menu():\n    click = False\n    run = True\n    WIDTH = 800\n    HEIGHT = 500\n    while run: ",
        "detail": "examples.example1.src.main",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "examples.example1.src.main",
        "description": "examples.example1.src.main",
        "peekOfCode": "screen = pygame.display.set_mode((800, 500))\nclock = pygame.time.Clock()\nbutton1 = Button(screen, 0, 0, 200, 100, \"Go\")\ndef main_menu():\n    click = False\n    run = True\n    WIDTH = 800\n    HEIGHT = 500\n    while run: \n        screen = pygame.display.set_mode((WIDTH, HEIGHT))",
        "detail": "examples.example1.src.main",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "examples.example1.src.main",
        "description": "examples.example1.src.main",
        "peekOfCode": "clock = pygame.time.Clock()\nbutton1 = Button(screen, 0, 0, 200, 100, \"Go\")\ndef main_menu():\n    click = False\n    run = True\n    WIDTH = 800\n    HEIGHT = 500\n    while run: \n        screen = pygame.display.set_mode((WIDTH, HEIGHT))\n        pygame.display.set_caption(\"Duality Game\")",
        "detail": "examples.example1.src.main",
        "documentation": {}
    },
    {
        "label": "button1",
        "kind": 5,
        "importPath": "examples.example1.src.main",
        "description": "examples.example1.src.main",
        "peekOfCode": "button1 = Button(screen, 0, 0, 200, 100, \"Go\")\ndef main_menu():\n    click = False\n    run = True\n    WIDTH = 800\n    HEIGHT = 500\n    while run: \n        screen = pygame.display.set_mode((WIDTH, HEIGHT))\n        pygame.display.set_caption(\"Duality Game\")\n        screen.fill(BG_COLOR)",
        "detail": "examples.example1.src.main",
        "documentation": {}
    },
    {
        "label": "main_menu",
        "kind": 2,
        "importPath": "examples.example2.src.main",
        "description": "examples.example2.src.main",
        "peekOfCode": "def main_menu():\n    click = False\n    run = True\n    WIDTH = 800\n    HEIGHT = 500\n    circle_x = 0\n    circle_y = 250\n    color = DARK_GREY\n    while run: \n        screen = pygame.display.set_mode((WIDTH, HEIGHT))",
        "detail": "examples.example2.src.main",
        "documentation": {}
    },
    {
        "label": "BG_COLOR",
        "kind": 5,
        "importPath": "examples.example2.src.main",
        "description": "examples.example2.src.main",
        "peekOfCode": "BG_COLOR = (28, 170, 156)\nWHITE = (255, 255, 255)\nBLUE = (0, 0, 255)\nDARK_GREY = (30,30,30)\nGREEN = (0, 255, 0)\nRED = (255, 0, 0)\nscreen = pygame.display.set_mode((800, 500))\nclock = pygame.time.Clock()\ndef main_menu():\n    click = False",
        "detail": "examples.example2.src.main",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "kind": 5,
        "importPath": "examples.example2.src.main",
        "description": "examples.example2.src.main",
        "peekOfCode": "WHITE = (255, 255, 255)\nBLUE = (0, 0, 255)\nDARK_GREY = (30,30,30)\nGREEN = (0, 255, 0)\nRED = (255, 0, 0)\nscreen = pygame.display.set_mode((800, 500))\nclock = pygame.time.Clock()\ndef main_menu():\n    click = False\n    run = True",
        "detail": "examples.example2.src.main",
        "documentation": {}
    },
    {
        "label": "BLUE",
        "kind": 5,
        "importPath": "examples.example2.src.main",
        "description": "examples.example2.src.main",
        "peekOfCode": "BLUE = (0, 0, 255)\nDARK_GREY = (30,30,30)\nGREEN = (0, 255, 0)\nRED = (255, 0, 0)\nscreen = pygame.display.set_mode((800, 500))\nclock = pygame.time.Clock()\ndef main_menu():\n    click = False\n    run = True\n    WIDTH = 800",
        "detail": "examples.example2.src.main",
        "documentation": {}
    },
    {
        "label": "DARK_GREY",
        "kind": 5,
        "importPath": "examples.example2.src.main",
        "description": "examples.example2.src.main",
        "peekOfCode": "DARK_GREY = (30,30,30)\nGREEN = (0, 255, 0)\nRED = (255, 0, 0)\nscreen = pygame.display.set_mode((800, 500))\nclock = pygame.time.Clock()\ndef main_menu():\n    click = False\n    run = True\n    WIDTH = 800\n    HEIGHT = 500",
        "detail": "examples.example2.src.main",
        "documentation": {}
    },
    {
        "label": "GREEN",
        "kind": 5,
        "importPath": "examples.example2.src.main",
        "description": "examples.example2.src.main",
        "peekOfCode": "GREEN = (0, 255, 0)\nRED = (255, 0, 0)\nscreen = pygame.display.set_mode((800, 500))\nclock = pygame.time.Clock()\ndef main_menu():\n    click = False\n    run = True\n    WIDTH = 800\n    HEIGHT = 500\n    circle_x = 0",
        "detail": "examples.example2.src.main",
        "documentation": {}
    },
    {
        "label": "RED",
        "kind": 5,
        "importPath": "examples.example2.src.main",
        "description": "examples.example2.src.main",
        "peekOfCode": "RED = (255, 0, 0)\nscreen = pygame.display.set_mode((800, 500))\nclock = pygame.time.Clock()\ndef main_menu():\n    click = False\n    run = True\n    WIDTH = 800\n    HEIGHT = 500\n    circle_x = 0\n    circle_y = 250",
        "detail": "examples.example2.src.main",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "examples.example2.src.main",
        "description": "examples.example2.src.main",
        "peekOfCode": "screen = pygame.display.set_mode((800, 500))\nclock = pygame.time.Clock()\ndef main_menu():\n    click = False\n    run = True\n    WIDTH = 800\n    HEIGHT = 500\n    circle_x = 0\n    circle_y = 250\n    color = DARK_GREY",
        "detail": "examples.example2.src.main",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "examples.example2.src.main",
        "description": "examples.example2.src.main",
        "peekOfCode": "clock = pygame.time.Clock()\ndef main_menu():\n    click = False\n    run = True\n    WIDTH = 800\n    HEIGHT = 500\n    circle_x = 0\n    circle_y = 250\n    color = DARK_GREY\n    while run: ",
        "detail": "examples.example2.src.main",
        "documentation": {}
    },
    {
        "label": "Button",
        "kind": 6,
        "importPath": "online.client.src.buttons.button",
        "description": "online.client.src.buttons.button",
        "peekOfCode": "class Button:\n    DARK_GREY = (29,29,29)\n    def __init__(self, screen, x, y, width, height, text=\"\", color=(DARK_GREY), hover=()):\n        self.screen = screen \n        self.clicked = False\n        self.height = height\n        self.width = width\n        self.text = text \n        self.color = color\n        self.hover = (color[0] + 10, color[1] + 10, color[2] + 10)",
        "detail": "online.client.src.buttons.button",
        "documentation": {}
    },
    {
        "label": "ImageButton",
        "kind": 6,
        "importPath": "online.client.src.buttons.image_button",
        "description": "online.client.src.buttons.image_button",
        "peekOfCode": "class ImageButton(Button):\n    def __init__(self, screen, x, y, image_path, scale):\n        image = pygame.image.load(image_path).convert_alpha()\n        width = image.get_width()\n        height = image.get_height()\n        super().__init__(screen, x, y, width, height) \n        self.image = pygame.transform.scale(image, (int(width * scale), int(height * scale)))\n        self.rect = self.image.get_rect()\n        self.rect.topleft = (x, y)\n    def draw(self):",
        "detail": "online.client.src.buttons.image_button",
        "documentation": {}
    },
    {
        "label": "InputBox",
        "kind": 6,
        "importPath": "online.client.src.buttons.input_box",
        "description": "online.client.src.buttons.input_box",
        "peekOfCode": "class InputBox:\n    def __init__(self, screen, x, y, w, h, text=''):\n        self.screen = screen\n        self.rect = pygame.Rect(x, y, w, h)\n        self.color = INACTIVE_BG\n        self.text = text\n        self.txt_surface = FONT.render(text, True, self.color)\n        self.active = False\n    def handle_event(self, event):\n        if event.type == pygame.MOUSEBUTTONDOWN:",
        "detail": "online.client.src.buttons.input_box",
        "documentation": {}
    },
    {
        "label": "ACTIVE_BG",
        "kind": 5,
        "importPath": "online.client.src.buttons.input_box",
        "description": "online.client.src.buttons.input_box",
        "peekOfCode": "ACTIVE_BG = (255, 255, 255)\nINACTIVE_BG = (20, 20, 20)\nFONT = pygame.font.SysFont(\"leelawadee\", 20)\nclass InputBox:\n    def __init__(self, screen, x, y, w, h, text=''):\n        self.screen = screen\n        self.rect = pygame.Rect(x, y, w, h)\n        self.color = INACTIVE_BG\n        self.text = text\n        self.txt_surface = FONT.render(text, True, self.color)",
        "detail": "online.client.src.buttons.input_box",
        "documentation": {}
    },
    {
        "label": "INACTIVE_BG",
        "kind": 5,
        "importPath": "online.client.src.buttons.input_box",
        "description": "online.client.src.buttons.input_box",
        "peekOfCode": "INACTIVE_BG = (20, 20, 20)\nFONT = pygame.font.SysFont(\"leelawadee\", 20)\nclass InputBox:\n    def __init__(self, screen, x, y, w, h, text=''):\n        self.screen = screen\n        self.rect = pygame.Rect(x, y, w, h)\n        self.color = INACTIVE_BG\n        self.text = text\n        self.txt_surface = FONT.render(text, True, self.color)\n        self.active = False",
        "detail": "online.client.src.buttons.input_box",
        "documentation": {}
    },
    {
        "label": "FONT",
        "kind": 5,
        "importPath": "online.client.src.buttons.input_box",
        "description": "online.client.src.buttons.input_box",
        "peekOfCode": "FONT = pygame.font.SysFont(\"leelawadee\", 20)\nclass InputBox:\n    def __init__(self, screen, x, y, w, h, text=''):\n        self.screen = screen\n        self.rect = pygame.Rect(x, y, w, h)\n        self.color = INACTIVE_BG\n        self.text = text\n        self.txt_surface = FONT.render(text, True, self.color)\n        self.active = False\n    def handle_event(self, event):",
        "detail": "online.client.src.buttons.input_box",
        "documentation": {}
    },
    {
        "label": "TicTacToeBox",
        "kind": 6,
        "importPath": "online.client.src.buttons.square",
        "description": "online.client.src.buttons.square",
        "peekOfCode": "class TicTacToeBox(Button):\n    def __init__(self, screen, x, y, height, width, text, color=(29,29,29)):\n        super().__init__(screen, x, y, height, width, text, color)\n    def setValue(self, value):\n        self.text = value;\n    def getValue(self):\n        options = \"OX\"\n        return self.text if self.text in options else \"\"",
        "detail": "online.client.src.buttons.square",
        "documentation": {}
    },
    {
        "label": "Text",
        "kind": 6,
        "importPath": "online.client.src.buttons.text",
        "description": "online.client.src.buttons.text",
        "peekOfCode": "class Text:\n    def __init__(self, screen, x, y, text=\"\", font_size=20):\n        self.font = pygame.font.SysFont('leelawadee', font_size)\n        self.screen = screen\n        self.text = text\n        self.pos = (x, y)\n    def setText(self, text):\n        self.text = text\n    def draw(self):\n        textsurface = self.font.render(self.text, True, (255, 255, 255))",
        "detail": "online.client.src.buttons.text",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "kind": 6,
        "importPath": "online.client.src.components.login_form",
        "description": "online.client.src.components.login_form",
        "peekOfCode": "class LoginForm:\n    def __init__(self, screen, x, y, w, h):\n        self.screen = screen\n        self.user_box = InputBox(screen, x, y, w, h)\n        self.pass_box = InputBox(screen, x, y + h + padding, w, h)\n        self.button = Button(screen, x, y + h * 2 + padding + 10, w, h, \"Login\")\n        self.logout_button = Button(screen, x, y, w, h, \"Logout\")\n        self.status = {}\n    def handle_event(self, event):\n        self.user_box.handle_event(event)",
        "detail": "online.client.src.components.login_form",
        "documentation": {}
    },
    {
        "label": "padding",
        "kind": 5,
        "importPath": "online.client.src.components.login_form",
        "description": "online.client.src.components.login_form",
        "peekOfCode": "padding = 10\n# Login Form component holds three elements, \n# 2 Input Boxes\n# 1 Button\nclass LoginForm:\n    def __init__(self, screen, x, y, w, h):\n        self.screen = screen\n        self.user_box = InputBox(screen, x, y, w, h)\n        self.pass_box = InputBox(screen, x, y + h + padding, w, h)\n        self.button = Button(screen, x, y + h * 2 + padding + 10, w, h, \"Login\")",
        "detail": "online.client.src.components.login_form",
        "documentation": {}
    },
    {
        "label": "RegisterForm",
        "kind": 6,
        "importPath": "online.client.src.components.register_form",
        "description": "online.client.src.components.register_form",
        "peekOfCode": "class RegisterForm:\n    def __init__(self, screen, x, y, w, h):\n        self.screen = screen\n        self.user_box = InputBox(screen, x, y, w, h)\n        self.pass_box = InputBox(screen, x, y + h + padding, w, h)\n        self.button = Button(screen, x, y + h * 2 + padding + 10, w, h, \"Register\")\n        # self.logout_button = Button(screen, x, y, w, h, \"Logout\")\n        self.status = {}\n    def handle_event(self, event):\n        self.user_box.handle_event(event)",
        "detail": "online.client.src.components.register_form",
        "documentation": {}
    },
    {
        "label": "padding",
        "kind": 5,
        "importPath": "online.client.src.components.register_form",
        "description": "online.client.src.components.register_form",
        "peekOfCode": "padding = 10\n# Register Form component holds three elements, \n# 2 Input Boxes\n# 1 Button\nclass RegisterForm:\n    def __init__(self, screen, x, y, w, h):\n        self.screen = screen\n        self.user_box = InputBox(screen, x, y, w, h)\n        self.pass_box = InputBox(screen, x, y + h + padding, w, h)\n        self.button = Button(screen, x, y + h * 2 + padding + 10, w, h, \"Register\")",
        "detail": "online.client.src.components.register_form",
        "documentation": {}
    },
    {
        "label": "TicTacToe",
        "kind": 6,
        "importPath": "online.client.src.game.tictactoe",
        "description": "online.client.src.game.tictactoe",
        "peekOfCode": "class TicTacToe:\n    LINE_COLOR = (23, 145, 135)\n    def __init__(self, screen, player_name, id=None):\n        # 12323\n        self.id = id or get_random_string(5)\n        self.username = player_name\n        self.sio = socketio.Client()\n        self.setup()\n        self.screen = screen\n        self.rows = 3",
        "detail": "online.client.src.game.tictactoe",
        "documentation": {}
    },
    {
        "label": "get_random_string",
        "kind": 2,
        "importPath": "online.client.src.game.tictactoe",
        "description": "online.client.src.game.tictactoe",
        "peekOfCode": "def get_random_string(length):\n    # choose from all lowercase letter\n    letters = string.ascii_lowercase\n    result_str = ''.join(random.choice(letters) for i in range(length))\n    return result_str\nclass TicTacToe:\n    LINE_COLOR = (23, 145, 135)\n    def __init__(self, screen, player_name, id=None):\n        # 12323\n        self.id = id or get_random_string(5)",
        "detail": "online.client.src.game.tictactoe",
        "documentation": {}
    },
    {
        "label": "RoomModel",
        "kind": 6,
        "importPath": "online.client.src.network.rooms.rooms",
        "description": "online.client.src.network.rooms.rooms",
        "peekOfCode": "class RoomModel:\n    @staticmethod\n    def create_room(username):\n        options = {\"user\": username}\n        response = requests.post(f\"{url}/auth/create_room\", data=options)\n        return response.json()\n    @staticmethod\n    def join_room(id, username):\n        options = {\"id\": id, \"user\": username}\n        response = requests.post(f\"{url}/auth/join_room\", data=options)",
        "detail": "online.client.src.network.rooms.rooms",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "online.client.src.network.rooms.rooms",
        "description": "online.client.src.network.rooms.rooms",
        "peekOfCode": "url = \"http://127.0.0.1:5000\"\nclass RoomModel:\n    @staticmethod\n    def create_room(username):\n        options = {\"user\": username}\n        response = requests.post(f\"{url}/auth/create_room\", data=options)\n        return response.json()\n    @staticmethod\n    def join_room(id, username):\n        options = {\"id\": id, \"user\": username}",
        "detail": "online.client.src.network.rooms.rooms",
        "documentation": {}
    },
    {
        "label": "UserModel",
        "kind": 6,
        "importPath": "online.client.src.network.users.users",
        "description": "online.client.src.network.users.users",
        "peekOfCode": "class UserModel:\n    @staticmethod\n    def create_user(username, password):\n        options = {\"user\": username, \"password\": password}\n        response = requests.post(f\"{url}/auth/register\", data=options)\n        return response.json()\n    @staticmethod\n    def authenticate(username, password):\n        options = {\"user\": username, \"password\": password}\n        response = requests.post(f\"{url}/auth/login\", data=options)",
        "detail": "online.client.src.network.users.users",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "online.client.src.network.users.users",
        "description": "online.client.src.network.users.users",
        "peekOfCode": "url = \"http://127.0.0.1:5000\"\nclass UserModel:\n    @staticmethod\n    def create_user(username, password):\n        options = {\"user\": username, \"password\": password}\n        response = requests.post(f\"{url}/auth/register\", data=options)\n        return response.json()\n    @staticmethod\n    def authenticate(username, password):\n        options = {\"user\": username, \"password\": password}",
        "detail": "online.client.src.network.users.users",
        "documentation": {}
    },
    {
        "label": "Blank",
        "kind": 6,
        "importPath": "online.client.src.screens.blank_screen",
        "description": "online.client.src.screens.blank_screen",
        "peekOfCode": "class Blank: \n    def __init__(self):\n        self.width = 1920\n        self.height = 1080\n        self.setup_screen()\n        self.click = False\n        self.running = True\n        self.button = Button(self.screen, self.width//2 - 100, self.height//2 - 25, 200, 50, \"BLANK SCREEN\", BLACK_COLOR)\n        self.clock = pygame.time.Clock()\n    def draw(self):",
        "detail": "online.client.src.screens.blank_screen",
        "documentation": {}
    },
    {
        "label": "BG_COLOR",
        "kind": 5,
        "importPath": "online.client.src.screens.blank_screen",
        "description": "online.client.src.screens.blank_screen",
        "peekOfCode": "BG_COLOR = (30, 30, 30)\nBLACK_COLOR = (0,0,0)\nclass Blank: \n    def __init__(self):\n        self.width = 1920\n        self.height = 1080\n        self.setup_screen()\n        self.click = False\n        self.running = True\n        self.button = Button(self.screen, self.width//2 - 100, self.height//2 - 25, 200, 50, \"BLANK SCREEN\", BLACK_COLOR)",
        "detail": "online.client.src.screens.blank_screen",
        "documentation": {}
    },
    {
        "label": "BLACK_COLOR",
        "kind": 5,
        "importPath": "online.client.src.screens.blank_screen",
        "description": "online.client.src.screens.blank_screen",
        "peekOfCode": "BLACK_COLOR = (0,0,0)\nclass Blank: \n    def __init__(self):\n        self.width = 1920\n        self.height = 1080\n        self.setup_screen()\n        self.click = False\n        self.running = True\n        self.button = Button(self.screen, self.width//2 - 100, self.height//2 - 25, 200, 50, \"BLANK SCREEN\", BLACK_COLOR)\n        self.clock = pygame.time.Clock()",
        "detail": "online.client.src.screens.blank_screen",
        "documentation": {}
    },
    {
        "label": "Game",
        "kind": 6,
        "importPath": "online.client.src.screens.game_screen",
        "description": "online.client.src.screens.game_screen",
        "peekOfCode": "class Game: \n    def __init__(self, name, id):\n        self.width = 600\n        self.height = 600\n        self.setup_screen()\n        self.game = TicTacToe(self.screen, name, id)\n        self.click = False\n        self.running = False\n        self.clock = pygame.time.Clock()\n    def draw(self):",
        "detail": "online.client.src.screens.game_screen",
        "documentation": {}
    },
    {
        "label": "BG_COLOR",
        "kind": 5,
        "importPath": "online.client.src.screens.game_screen",
        "description": "online.client.src.screens.game_screen",
        "peekOfCode": "BG_COLOR = (28, 170, 156)\nclass Game: \n    def __init__(self, name, id):\n        self.width = 600\n        self.height = 600\n        self.setup_screen()\n        self.game = TicTacToe(self.screen, name, id)\n        self.click = False\n        self.running = False\n        self.clock = pygame.time.Clock()",
        "detail": "online.client.src.screens.game_screen",
        "documentation": {}
    },
    {
        "label": "MainScreen",
        "kind": 6,
        "importPath": "online.client.src.screens.main_screen",
        "description": "online.client.src.screens.main_screen",
        "peekOfCode": "class MainScreen: \n    def __init__(self):\n        self.width = 800\n        self.height = 500\n        self.setup_screen()\n        # objects init\n        start_button = ImageButton(self.screen, 100, 200, \"assets/start_btn.png\", 0.7)\n        exit_button = ImageButton(self.screen, 450, 200, \"assets/exit_btn.png\", 0.7)\n        exit_button = ImageButton(self.screen, 450, 200, \"assets/exit_btn.png\", 0.7)\n        user_text = Text(self.screen, 15, 15, \"Not Logged in\")",
        "detail": "online.client.src.screens.main_screen",
        "documentation": {}
    },
    {
        "label": "BG_COLOR",
        "kind": 5,
        "importPath": "online.client.src.screens.main_screen",
        "description": "online.client.src.screens.main_screen",
        "peekOfCode": "BG_COLOR = (28, 170, 156)\nclass MainScreen: \n    def __init__(self):\n        self.width = 800\n        self.height = 500\n        self.setup_screen()\n        # objects init\n        start_button = ImageButton(self.screen, 100, 200, \"assets/start_btn.png\", 0.7)\n        exit_button = ImageButton(self.screen, 450, 200, \"assets/exit_btn.png\", 0.7)\n        exit_button = ImageButton(self.screen, 450, 200, \"assets/exit_btn.png\", 0.7)",
        "detail": "online.client.src.screens.main_screen",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "online.client.src.main",
        "description": "online.client.src.main",
        "peekOfCode": "def main():\n    main_screen = MainScreen()\n    main_screen.run()   \nif __name__ == \"__main__\":\n    main()",
        "detail": "online.client.src.main",
        "documentation": {}
    },
    {
        "label": "storage_db",
        "kind": 5,
        "importPath": "online.server.db.database",
        "description": "online.server.db.database",
        "peekOfCode": "storage_db = Storage(\"Tic Tac Toe\", \"storage.json\")",
        "detail": "online.server.db.database",
        "documentation": {}
    },
    {
        "label": "get_users",
        "kind": 2,
        "importPath": "online.server.routes.auth",
        "description": "online.server.routes.auth",
        "peekOfCode": "def get_users():\n    return jsonify(storage_db.get_users())\n@auth.route(\"/rooms\")\ndef get_rooms():\n    return jsonify(storage_db.get_rooms())\n@auth.route(\"/register\", methods=[\"POST\"])\ndef create_user():\n    user = request.form['user']\n    password = request.form['password']\n    password = generate_password_hash(password)",
        "detail": "online.server.routes.auth",
        "documentation": {}
    },
    {
        "label": "get_rooms",
        "kind": 2,
        "importPath": "online.server.routes.auth",
        "description": "online.server.routes.auth",
        "peekOfCode": "def get_rooms():\n    return jsonify(storage_db.get_rooms())\n@auth.route(\"/register\", methods=[\"POST\"])\ndef create_user():\n    user = request.form['user']\n    password = request.form['password']\n    password = generate_password_hash(password)\n    return jsonify(storage_db.create_user(user, password))\n@auth.route(\"/login\", methods=[\"POST\"])\ndef login():",
        "detail": "online.server.routes.auth",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "online.server.routes.auth",
        "description": "online.server.routes.auth",
        "peekOfCode": "def create_user():\n    user = request.form['user']\n    password = request.form['password']\n    password = generate_password_hash(password)\n    return jsonify(storage_db.create_user(user, password))\n@auth.route(\"/login\", methods=[\"POST\"])\ndef login():\n    user = request.form['user']\n    password = request.form['password']\n    return jsonify(storage_db.authenticate(user, password))",
        "detail": "online.server.routes.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "online.server.routes.auth",
        "description": "online.server.routes.auth",
        "peekOfCode": "def login():\n    user = request.form['user']\n    password = request.form['password']\n    return jsonify(storage_db.authenticate(user, password))\n@auth.route(\"/create_room\", methods=[\"POST\"])\ndef create_room():\n    user = request.form['user']\n    return jsonify(storage_db.create_room(user))\n@auth.route(\"/join_room\", methods=[\"POST\"])\ndef join_room():",
        "detail": "online.server.routes.auth",
        "documentation": {}
    },
    {
        "label": "create_room",
        "kind": 2,
        "importPath": "online.server.routes.auth",
        "description": "online.server.routes.auth",
        "peekOfCode": "def create_room():\n    user = request.form['user']\n    return jsonify(storage_db.create_room(user))\n@auth.route(\"/join_room\", methods=[\"POST\"])\ndef join_room():\n    room_id = request.form['id']\n    user = request.form['user']\n    return jsonify(storage_db.join_room(room_id, user))",
        "detail": "online.server.routes.auth",
        "documentation": {}
    },
    {
        "label": "join_room",
        "kind": 2,
        "importPath": "online.server.routes.auth",
        "description": "online.server.routes.auth",
        "peekOfCode": "def join_room():\n    room_id = request.form['id']\n    user = request.form['user']\n    return jsonify(storage_db.join_room(room_id, user))",
        "detail": "online.server.routes.auth",
        "documentation": {}
    },
    {
        "label": "auth",
        "kind": 5,
        "importPath": "online.server.routes.auth",
        "description": "online.server.routes.auth",
        "peekOfCode": "auth = Blueprint(\"auth\", __name__)\n@auth.route(\"/users\")\ndef get_users():\n    return jsonify(storage_db.get_users())\n@auth.route(\"/rooms\")\ndef get_rooms():\n    return jsonify(storage_db.get_rooms())\n@auth.route(\"/register\", methods=[\"POST\"])\ndef create_user():\n    user = request.form['user']",
        "detail": "online.server.routes.auth",
        "documentation": {}
    },
    {
        "label": "Room",
        "kind": 6,
        "importPath": "online.server.storage.room",
        "description": "online.server.storage.room",
        "peekOfCode": "class Room:\n    def __init__(self, owner_id, game_id):\n        self.owner = owner_id\n        self.id = game_id\n        self.symbols = [\"O\"]\n        self.players = {owner_id: \"X\"}\n    def get_id(self):\n        return self.id\n    def get_players(self):\n        return self.players        ",
        "detail": "online.server.storage.room",
        "documentation": {}
    },
    {
        "label": "Storage",
        "kind": 6,
        "importPath": "online.server.storage.storage",
        "description": "online.server.storage.storage",
        "peekOfCode": "class Storage:\n    def __init__(self, game, json_file=\"storage.json\"):\n        self.file = json_file\n        self.game = game\n        self.rooms = {}\n        self.users = JsonData.load_from_json(json_file)\n    def user_exists(self, user):\n            return user in self.users   \n    def authenticate(self, user, password):\n        if not self.user_exists(user):",
        "detail": "online.server.storage.storage",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "online.server.storage.user",
        "description": "online.server.storage.user",
        "peekOfCode": "class User:\n    def __init__(self, name, password, balance):\n        self.name = name\n        self.password = password\n        self.balance = balance\n    def set_balance(self, balance):\n        self.balance = balance\n    def add_balance(self, add_balance):\n        self.balance += add_balance    \n    def get_info(self):",
        "detail": "online.server.storage.user",
        "documentation": {}
    },
    {
        "label": "JsonData",
        "kind": 6,
        "importPath": "online.server.utility.json_data",
        "description": "online.server.utility.json_data",
        "peekOfCode": "class JsonData:\n    @staticmethod\n    def object_to_user(data):\n        # if object cannot be converted into a User Class then exit early\n        if \"name\" not in data and \"password\" not in data:\n            return data\n        # return User Class object\n        return User(data[\"name\"], data[\"password\"], data[\"balance\"])\n    @staticmethod\n    def load_from_json(json_file):",
        "detail": "online.server.utility.json_data",
        "documentation": {}
    },
    {
        "label": "Tools",
        "kind": 6,
        "importPath": "online.server.utility.tools",
        "description": "online.server.utility.tools",
        "peekOfCode": "class Tools:\n    @staticmethod\n    def get_random_id(length):\n        # choose from all lowercase letter\n        letters = string.ascii_lowercase\n        result_str = ''.join(random.choice(letters) for i in range(length))\n        return result_str",
        "detail": "online.server.utility.tools",
        "documentation": {}
    },
    {
        "label": "home_page",
        "kind": 2,
        "importPath": "online.server.application",
        "description": "online.server.application",
        "peekOfCode": "def home_page():\n    return jsonify({\"success\": \"HELLO CLASS\"})\n@socketio.on(\"move\")\ndef handleMove(data):\n    print(\"Got message:\", data)\n    room_id = data[\"channel\"]\n    emit(\"move\", data, room=room_id)\n@socketio.on(\"join\")\ndef syncGame(data):\n    # data being passed in",
        "detail": "online.server.application",
        "documentation": {}
    },
    {
        "label": "handleMove",
        "kind": 2,
        "importPath": "online.server.application",
        "description": "online.server.application",
        "peekOfCode": "def handleMove(data):\n    print(\"Got message:\", data)\n    room_id = data[\"channel\"]\n    emit(\"move\", data, room=room_id)\n@socketio.on(\"join\")\ndef syncGame(data):\n    # data being passed in\n    # data{\"channel\": channel_id, \"player_name\": player trying to join}\n    # extracting channel id and player name\n    room_id = data[\"channel\"]",
        "detail": "online.server.application",
        "documentation": {}
    },
    {
        "label": "syncGame",
        "kind": 2,
        "importPath": "online.server.application",
        "description": "online.server.application",
        "peekOfCode": "def syncGame(data):\n    # data being passed in\n    # data{\"channel\": channel_id, \"player_name\": player trying to join}\n    # extracting channel id and player name\n    room_id = data[\"channel\"]\n    player_name = data[\"player_name\"]\n    # boolean to check if player is trying to join a new room\n    is_new_room = not storage_db.room_exists(room_id)\n    # if room id is new then create a room for it else add player to already existing room\n    if is_new_room:",
        "detail": "online.server.application",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "online.server.application",
        "description": "online.server.application",
        "peekOfCode": "application = Flask(__name__)\napplication.config[\"SECRET_KEY\"] = \"ASLJKDKALSD!\"\nsocketio = SocketIO(application)\n# rooms = {}\napplication.register_blueprint(auth, url_prefix=\"/auth\")\n@application.route(\"/\", methods=[\"GET\"])\ndef home_page():\n    return jsonify({\"success\": \"HELLO CLASS\"})\n@socketio.on(\"move\")\ndef handleMove(data):",
        "detail": "online.server.application",
        "documentation": {}
    },
    {
        "label": "application.config[\"SECRET_KEY\"]",
        "kind": 5,
        "importPath": "online.server.application",
        "description": "online.server.application",
        "peekOfCode": "application.config[\"SECRET_KEY\"] = \"ASLJKDKALSD!\"\nsocketio = SocketIO(application)\n# rooms = {}\napplication.register_blueprint(auth, url_prefix=\"/auth\")\n@application.route(\"/\", methods=[\"GET\"])\ndef home_page():\n    return jsonify({\"success\": \"HELLO CLASS\"})\n@socketio.on(\"move\")\ndef handleMove(data):\n    print(\"Got message:\", data)",
        "detail": "online.server.application",
        "documentation": {}
    },
    {
        "label": "socketio",
        "kind": 5,
        "importPath": "online.server.application",
        "description": "online.server.application",
        "peekOfCode": "socketio = SocketIO(application)\n# rooms = {}\napplication.register_blueprint(auth, url_prefix=\"/auth\")\n@application.route(\"/\", methods=[\"GET\"])\ndef home_page():\n    return jsonify({\"success\": \"HELLO CLASS\"})\n@socketio.on(\"move\")\ndef handleMove(data):\n    print(\"Got message:\", data)\n    room_id = data[\"channel\"]",
        "detail": "online.server.application",
        "documentation": {}
    },
    {
        "label": "Button",
        "kind": 6,
        "importPath": "tictactoe.src.buttons.button",
        "description": "tictactoe.src.buttons.button",
        "peekOfCode": "class Button:\n    DARK_GREY = (29,29,29)\n    def __init__(self, screen, x, y, width, height, text=\"\", color=(DARK_GREY), hover=()):\n        self.screen = screen \n        self.clicked = False\n        self.height = height\n        self.width = width\n        self.text = text \n        self.color = color\n        self.hover = (color[0] + 10, color[1] + 10, color[2] + 10)",
        "detail": "tictactoe.src.buttons.button",
        "documentation": {}
    },
    {
        "label": "ImageButton",
        "kind": 6,
        "importPath": "tictactoe.src.buttons.image_button",
        "description": "tictactoe.src.buttons.image_button",
        "peekOfCode": "class ImageButton(Button):\n    def __init__(self, screen, x, y, image, scale):\n        width = image.get_width()\n        height = image.get_height()\n        super().__init__(screen, x, y, width, height) \n        self.image = pygame.transform.scale(image, (int(width * scale), int(height * scale)))\n        self.rect = self.image.get_rect()\n        self.rect.topleft = (x, y)\n    def draw(self):\n        self.screen.blit(self.image, (self.rect.x, self.rect.y))",
        "detail": "tictactoe.src.buttons.image_button",
        "documentation": {}
    },
    {
        "label": "TicTacToeBox",
        "kind": 6,
        "importPath": "tictactoe.src.buttons.square",
        "description": "tictactoe.src.buttons.square",
        "peekOfCode": "class TicTacToeBox(Button):\n    def __init__(self, screen, x, y, height, width, text, color=(29,29,29)):\n        super().__init__(screen, x, y, height, width, text, color)\n    def setValue(self, value):\n        self.text = value;\n    def getValue(self):\n        options = \"OX\"\n        return self.text if self.text in options else \"\"",
        "detail": "tictactoe.src.buttons.square",
        "documentation": {}
    },
    {
        "label": "TicTacToe",
        "kind": 6,
        "importPath": "tictactoe.src.game.tictactoe",
        "description": "tictactoe.src.game.tictactoe",
        "peekOfCode": "class TicTacToe:\n    LINE_COLOR = (23, 145, 135)\n    def __init__(self, screen):\n        self.turn = 0\n        self.screen = screen\n        self.rows = 3\n        self.cols = 3\n        self.board = []\n        self.createBoard()\n    def createBoard(self):",
        "detail": "tictactoe.src.game.tictactoe",
        "documentation": {}
    },
    {
        "label": "game",
        "kind": 2,
        "importPath": "tictactoe.src.main",
        "description": "tictactoe.src.main",
        "peekOfCode": "def game():\n    HEIGHT = 600\n    WIDTH = 600\n    screen = pygame.display.set_mode((WIDTH, HEIGHT))\n    game1 = TicTacToe(screen)\n    game1.createBoard()\n    click = False\n    running = True\n    while running: \n        pygame.display.set_caption(\"Tic Tac Toe\")",
        "detail": "tictactoe.src.main",
        "documentation": {}
    },
    {
        "label": "main_menu",
        "kind": 2,
        "importPath": "tictactoe.src.main",
        "description": "tictactoe.src.main",
        "peekOfCode": "def main_menu():\n    click = False\n    run = True\n    WIDTH = 800\n    HEIGHT = 500\n    while run: \n        pygame.display.set_caption(\"Duality Game\")\n        screen = pygame.display.set_mode((WIDTH, HEIGHT))\n        screen.fill(BG_COLOR)\n        pos = pygame.mouse.get_pos()",
        "detail": "tictactoe.src.main",
        "documentation": {}
    },
    {
        "label": "BG_COLOR",
        "kind": 5,
        "importPath": "tictactoe.src.main",
        "description": "tictactoe.src.main",
        "peekOfCode": "BG_COLOR = (28, 170, 156)\nscreen = pygame.display.set_mode((800, 500))\nclock = pygame.time.Clock()\nstart_img = pygame.image.load(\"assets/start_btn.png\").convert_alpha()\nexit_img = pygame.image.load(\"assets/exit_btn.png\").convert_alpha()\nstart_button = ImageButton(screen, 100, 200, start_img, 0.7)\nexit_button = ImageButton(screen, 450, 200, exit_img, 0.7)\n# screens below\ndef game():\n    HEIGHT = 600",
        "detail": "tictactoe.src.main",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "tictactoe.src.main",
        "description": "tictactoe.src.main",
        "peekOfCode": "screen = pygame.display.set_mode((800, 500))\nclock = pygame.time.Clock()\nstart_img = pygame.image.load(\"assets/start_btn.png\").convert_alpha()\nexit_img = pygame.image.load(\"assets/exit_btn.png\").convert_alpha()\nstart_button = ImageButton(screen, 100, 200, start_img, 0.7)\nexit_button = ImageButton(screen, 450, 200, exit_img, 0.7)\n# screens below\ndef game():\n    HEIGHT = 600\n    WIDTH = 600",
        "detail": "tictactoe.src.main",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "tictactoe.src.main",
        "description": "tictactoe.src.main",
        "peekOfCode": "clock = pygame.time.Clock()\nstart_img = pygame.image.load(\"assets/start_btn.png\").convert_alpha()\nexit_img = pygame.image.load(\"assets/exit_btn.png\").convert_alpha()\nstart_button = ImageButton(screen, 100, 200, start_img, 0.7)\nexit_button = ImageButton(screen, 450, 200, exit_img, 0.7)\n# screens below\ndef game():\n    HEIGHT = 600\n    WIDTH = 600\n    screen = pygame.display.set_mode((WIDTH, HEIGHT))",
        "detail": "tictactoe.src.main",
        "documentation": {}
    },
    {
        "label": "start_img",
        "kind": 5,
        "importPath": "tictactoe.src.main",
        "description": "tictactoe.src.main",
        "peekOfCode": "start_img = pygame.image.load(\"assets/start_btn.png\").convert_alpha()\nexit_img = pygame.image.load(\"assets/exit_btn.png\").convert_alpha()\nstart_button = ImageButton(screen, 100, 200, start_img, 0.7)\nexit_button = ImageButton(screen, 450, 200, exit_img, 0.7)\n# screens below\ndef game():\n    HEIGHT = 600\n    WIDTH = 600\n    screen = pygame.display.set_mode((WIDTH, HEIGHT))\n    game1 = TicTacToe(screen)",
        "detail": "tictactoe.src.main",
        "documentation": {}
    },
    {
        "label": "exit_img",
        "kind": 5,
        "importPath": "tictactoe.src.main",
        "description": "tictactoe.src.main",
        "peekOfCode": "exit_img = pygame.image.load(\"assets/exit_btn.png\").convert_alpha()\nstart_button = ImageButton(screen, 100, 200, start_img, 0.7)\nexit_button = ImageButton(screen, 450, 200, exit_img, 0.7)\n# screens below\ndef game():\n    HEIGHT = 600\n    WIDTH = 600\n    screen = pygame.display.set_mode((WIDTH, HEIGHT))\n    game1 = TicTacToe(screen)\n    game1.createBoard()",
        "detail": "tictactoe.src.main",
        "documentation": {}
    },
    {
        "label": "start_button",
        "kind": 5,
        "importPath": "tictactoe.src.main",
        "description": "tictactoe.src.main",
        "peekOfCode": "start_button = ImageButton(screen, 100, 200, start_img, 0.7)\nexit_button = ImageButton(screen, 450, 200, exit_img, 0.7)\n# screens below\ndef game():\n    HEIGHT = 600\n    WIDTH = 600\n    screen = pygame.display.set_mode((WIDTH, HEIGHT))\n    game1 = TicTacToe(screen)\n    game1.createBoard()\n    click = False",
        "detail": "tictactoe.src.main",
        "documentation": {}
    },
    {
        "label": "exit_button",
        "kind": 5,
        "importPath": "tictactoe.src.main",
        "description": "tictactoe.src.main",
        "peekOfCode": "exit_button = ImageButton(screen, 450, 200, exit_img, 0.7)\n# screens below\ndef game():\n    HEIGHT = 600\n    WIDTH = 600\n    screen = pygame.display.set_mode((WIDTH, HEIGHT))\n    game1 = TicTacToe(screen)\n    game1.createBoard()\n    click = False\n    running = True",
        "detail": "tictactoe.src.main",
        "documentation": {}
    }
]